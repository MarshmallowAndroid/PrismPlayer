using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace Common.BankFiles.Katana
{
    public class PrismDecryptStream(Stream sourceStream) : Stream
    {
        private static readonly uint[] keyTable =
        {
            0x588a97bd, 0x32dfcea2, 0x7c4d2c9c, 0xacd75df1, 0xb37ee965, 0x72a28d15, 0xbac10f51, 0x4fdfaf1d, 0x16102ff6, 0xcda6bcf3, 0xc96870c8, 0x620d13c0,
            0xa50e2260, 0xb25430cf, 0x712fe957, 0x3f395277, 0x043739c6, 0xd02ccd03, 0x68ed968e, 0xc450dbe2, 0x3fe17238, 0x9ae4d6a2, 0xc8fe91ae, 0x2423585a,
            0x83e1ca78, 0x7e9053e3, 0xfbb96811, 0x4782d0bc, 0xba85f1f9, 0x19125977, 0x91c42c67, 0xc9f47150, 0xeab23585, 0xf1ae7e46, 0xe5d0bd7b, 0x3d78a1b2,
            0xc91a92bf, 0xdf88344c, 0x37985a06, 0xf52ca983, 0xdd74be02, 0x808c0040, 0x5659274d, 0x5230ea21, 0x0a1e52b3, 0x6b8d814f, 0x960d2a97, 0x14bdc8ee,
            0xda31fe8d, 0x4dd87d47, 0xbae74971, 0x10279539, 0x3c4b232d, 0x6cac4061, 0xab38bfd1, 0x162a231a, 0xb6e5d55a, 0x45027a6f, 0x2e1e7159, 0xb103a5c8,
            0x90bc5d11, 0x406bc769, 0x9503edba, 0x96b3af11, 0x4232a54f, 0xfe8a6c9b, 0xe4594aa9, 0xc641da83, 0x8392aaae, 0xf2cd3fb2, 0x0a2219a8, 0xd0b155d8,
            0xb6bd3c53, 0x01a47181, 0xc47a8a69, 0x7986494f, 0xc518bebd, 0xf2930839, 0x5dca10d9, 0x6852de31, 0x3336018c, 0xf142f0ca, 0x35754d53, 0x34a1cff0,
            0xb578a999, 0xd91a872d, 0x12bc301f, 0x92e895d3, 0xecc7c1a1, 0x5f8678fe, 0x92c0b025, 0x41864826, 0x53470485, 0x0f8dd506, 0xfac809bf, 0x822482d2,
            0xf46f5f1c, 0x95202264, 0xf1e2f40a, 0x4bac5a8a, 0x1a238fff, 0x73a1353d, 0xee4a28d5, 0x7afa49d7, 0x465094e3, 0x34d4e696, 0xf5b0f0ff, 0xc11579fe,
            0xec00281a, 0xfaae1489, 0x703707df, 0xd238ee51, 0x31edf8ad, 0xd3ae40fc, 0x74c892b6, 0x18b2c281, 0xe0a169ba, 0xffb2a694, 0xc4bb3091, 0xadc929a6,
            0x6b2af619, 0xb0760e5c, 0xf64f38de, 0x92fa19ab, 0xf59ad6e4, 0xbe63c547, 0xe378e566, 0x099d3ee7, 0x6d93c81e, 0x3ab468b8, 0xee1a653c, 0x0f5e68dc,
            0x063e8b93, 0x57a37bb0, 0x03af8f4f, 0x441ff5c6, 0x1ce2b4e2, 0x24d0b5e3, 0x39043dfa, 0x56e54007, 0xbde2470c, 0xba68d58e, 0x863645db, 0x6bc79197,
            0x0a7519f2, 0xac7d8da2, 0xf3547548, 0x1e1bdeef, 0x5500021a, 0x94455591, 0x3538f0d4, 0x78942763, 0x228ba169, 0xec5c00c8, 0x39c098f0, 0xe3786d01,
            0x65dfa3ec, 0x81901aa3, 0xfc3e64b3, 0x48d483e9, 0x9808c464, 0x2eb06d72, 0x9dbc5e4f, 0x889f46d0, 0xe8cc7b7e, 0x8538df2c, 0x3f0a45d7, 0x7d380e27,
            0xd94f8e4d, 0x22ef74b6, 0x400bece2, 0xa36e4eb8, 0x0ee4e2f7, 0x77a1cd4c, 0xa523fefe, 0x17a1b4ab, 0xd63439b8, 0x911fbbc9, 0x1f891735, 0x3a9c1296,
            0xdbddae8e, 0xbf6a2026, 0x4879d95a, 0xcadb44a7, 0x928b4642, 0xe38521a8, 0xbc876e99, 0x71f8747e, 0xcd26d4b9, 0xce53a588, 0xffaa6647, 0x848b4406,
            0xb0a84d03, 0xd8df1948, 0x0cedd096, 0x43838f9b, 0x8c255411, 0x0604c582, 0xf44fe357, 0xcc0fa430, 0x5bfcfcdf, 0x70af6540, 0xa866edf7, 0x21266de4,
            0x4920688d, 0x281856e7, 0x8ef51d74, 0xb581ab7f, 0xa0aa8418, 0xf454d92e, 0xcbd7d505, 0xeb7c4cc8, 0x0fa87410, 0xa541699c, 0x74745fcb, 0x4ca5e059,
            0xa308fcc2, 0xb8979289, 0x48244f3f, 0x2a79ae7a, 0x73633c7e, 0xd2177caa, 0x2eb2fe3a, 0x8c259795, 0xf7ef0c11, 0x3863c73b, 0xc72b9a66, 0xd851d7a2,
            0xc32bece1, 0x9462bebc, 0x6249f774, 0x20e1a77e, 0x7d178625, 0xe68d0255, 0xe414a495, 0x9bcdbb43, 0xbb901088, 0x755e903c, 0x3c6a44d5, 0xb3700990,
            0xdafefe63, 0xa9d6f335, 0xb1d0aba0, 0xd2120147, 0x4c6350e6, 0x87cd1803, 0x03e276ac, 0xe44ca48d, 0x641f69ba, 0xd49da6db, 0x54683d3a, 0x500368aa,
            0x262a3807, 0x664d3241, 0xc1bd2111, 0x4d3fc729, 0xc544d12d, 0xcd721140, 0xce70e133, 0x38d77d0b, 0x2d67b6ff, 0x54999d4e, 0xf96d20d0, 0x612baacc,
            0xb9ed6922, 0x516cab15, 0x353f2d8a, 0x8369f053, 0x9eb6f948, 0x39a52cfd, 0xf7c8131b, 0x23591b0d, 0x4ed5fba0, 0x247b2eb0, 0xf43fe310, 0x77a91985,
            0x07e85104, 0xafb67637, 0x9d44dfc3, 0x39d6db93, 0x9cbf9ac9, 0x99df3527, 0x3d2d7e45, 0xaa6c1241, 0x98137e69, 0x85f32e90, 0x06053428, 0x8dd9ca5f,
            0x8b7ff3a9, 0xa15ceaf5, 0x3b1cea40, 0x324f2c0b, 0xd62a6f93, 0xeece5b88, 0xb6200389, 0x900aa914, 0xbda459ae, 0x451e9e7b, 0x33bfc41e, 0xd8042125,
            0x4e70f392, 0x2c15a9ff, 0xcbac05a5, 0xb9dfc79e, 0x1350b927, 0x5b735e91, 0x66ac752b, 0xd23d6b2e, 0xa408da97, 0x00c7e530, 0x3d6f6ca1, 0xb9b1e02b,
            0x6bd9fa48, 0x627424bd, 0x41f4dcd7, 0x50d457e0, 0x6bc601ec, 0x5052663c, 0x7b0914ba, 0x044a2875, 0x83105321, 0x2ffab413, 0x01565b52, 0x6fbfc3c1,
            0x66d3f499, 0xfd029949, 0x7ad0cf04, 0x6e82ea98, 0xaf22d202, 0x3d751840, 0x5cb51b44, 0x775c5452, 0x93e7c6ce, 0x0fb3eb99, 0x203425fc, 0x3f5fe84f,
            0x47e71849, 0xdb0accf7, 0xc5cd50fe, 0xbd1e9e00, 0x92641712, 0x28b7bbb7, 0x24f572c3, 0x711d6d28, 0x7636751f, 0xba6f6fa8, 0x0c794585, 0x8a5dc3ed,
            0xe546444d, 0xf0f51e0c, 0x46918a2b, 0xd71d1c49, 0xcc619a61, 0xe43086e1, 0xaf3233b0, 0x9d47a528, 0xbc1e1526, 0x74877a0d, 0x9548eaaa, 0x531fa295,
            0x6e474efe, 0x3890b20a, 0x5c348a66, 0x0e6aec7a, 0x188b4726, 0x814db612, 0x15b05995, 0xc6a3bb39, 0x68c12c34, 0x1f2203b2, 0xc6a8a041, 0xe5d5df4d,
            0x8f1a2ac9, 0xae721a71, 0xd306873a, 0x071302f7, 0xda8bad76, 0x9ab7da89, 0x3b2e879d, 0xcb93aa75, 0x38ef8733, 0x3fd6cd27, 0x840d6a49, 0x30eff687,
            0xc48ba023, 0x60381ec8, 0x1371517e, 0x64a05714, 0x6088a86f, 0x881cc0f2, 0x0df21f16, 0x3bbd0785, 0xd6878c2d, 0x9887e580, 0x258cfaeb, 0x06d3be6a,
            0x435e7eab, 0x6db11c62, 0x31923c9e, 0x6c653926, 0x0d9946b5, 0xb11b1460, 0x0c10f701, 0xafc66c25, 0xb18e73ea, 0x7628ffd6, 0x98ed07b4, 0xd69a38ca,
            0xb58b6da0, 0x17c85a82, 0x34162f37, 0xef7b544a, 0xc1212677, 0xf1c84497, 0xe4982bb2, 0x9a30ce1b, 0x35e51729, 0x87772d82, 0x9bcb9638, 0xe1292314,
            0x3bb964b6, 0x8c0fd184, 0x843aa007, 0x90837559, 0x168a5a02, 0x0aa19e47, 0x3523dc81, 0xa834ab30, 0x22ee81a7, 0xc9818e18, 0xfa73268e, 0x36004a71,
            0xb8bcecd8, 0xeac0bf36, 0xa7a431f5, 0x39d67aa3, 0x1605fd47, 0x406c1236, 0xd8627013, 0xb643c1d1, 0x317f2ddc, 0x26f49b0b, 0x2e593db7, 0x3e7ce4dc,
            0xe289f9c4, 0xd85079c2, 0xdd810048, 0x06ebf7c2, 0x925c0218, 0x68d091f0, 0x012cc6a1, 0x450c2642, 0x5e0b27f9, 0xf472c0f0, 0xc64d738b, 0x27e4a568,
            0xbacdc308, 0xbdff9351, 0x6c965cd1, 0x8e407069, 0xdc127db2, 0x581447e8, 0x01ebe694, 0xd4b17df9, 0x2439ea7c, 0xf13dc000, 0x0ac79d99, 0x1e1969cd,
            0xee6e18a6, 0xa2d3f43e, 0xdc8eabd2, 0xfcf6b232, 0xe4303f02, 0xd1947ecf, 0x84e4a07a, 0xd9eecaf2, 0x67f76114, 0xa2bfbadb, 0x2b7cb6a9, 0x745b94eb,
            0xa4d7c23d, 0x53a89ac0, 0xd964077b, 0xaf103351, 0x94ab0bde, 0x9ab3b0f7, 0x37cbf3e8, 0x56441433, 0x6d2f6e86, 0xc21d54b2, 0xc0fa230d, 0x713b868d,
            0x2dce55e2, 0xe1720032, 0x11da2ff5, 0x4cb044ff, 0x9b31cd01, 0x2fad34c8, 0x3b2056a5, 0x76f8332d, 0x6180f6f0, 0xe4a4a24d, 0x737a5136, 0x10373b1e,
            0x93382fe7, 0xeaf869f4, 0xd2093570, 0xcc6f87a6, 0x77504c99, 0x33a1c3d0, 0x3d7df0bf, 0x16a397da, 0x132d52d5, 0x6133f904, 0x8a15ec0e, 0x7cb75cc0,
            0x6408a0f0, 0x8e7db660, 0x0f2a836f, 0x2360cabd, 0x0c8d1184, 0x08d41b72, 0x7be0c71e, 0x23db9505, 0xf18d5932, 0x5bf5c431, 0x9cd913f9, 0x84e47b03,
            0xc79a7dbc, 0x94b2df24, 0xcb1c8d47, 0x9ee0afe6, 0x16cefe19, 0x48782ca9, 0x3fe62908, 0x4d860e0c, 0xa5ef2fe5, 0x3ccf0518, 0x572fd19b, 0xca80f8db,
            0xe4958652, 0x8e93884e, 0x5f8101d3, 0xbcdb2641, 0x7befe10d, 0x34b0e677, 0xa6140ad2, 0xd13fc38f, 0xda0da91d, 0x36b41a62, 0x5ec5a801, 0xe04f36d5,
            0x582d3175, 0x1dd0e1c0, 0x63e6edca, 0x40b42709, 0x9fec56d4, 0x2cd44002, 0x30a42f62, 0x59f0fb50, 0x76c1e95d, 0xfe18fc78, 0xe61cf2cf, 0x7245750e,
            0x836a41a5, 0x0385fe3f, 0x026f3a28, 0x94893972, 0xc05860f1, 0xb839aca7, 0xb232c0f6, 0x3a53880f, 0xe95e3737, 0x8888ae14, 0x61956c6c, 0x5b5dfb72,
            0x6c18d209, 0xed7fd005, 0x409740fe, 0xace50823, 0xaf99ed4a, 0x76b2fdca, 0xc75aa794, 0x00d12c4f, 0x7d850232, 0x1e98d235, 0x5427719c, 0xb42b8deb,
            0x5713cb17, 0xfd1afffc, 0xd88f8626, 0xa2d9df71, 0x39d08de1, 0xa5b8d077, 0xea381fa4, 0xfc518b70, 0x2e910d8d, 0x5c8c84ef, 0x6245f147, 0x32ff0faa,
            0x6753d1a5, 0x1db43b62, 0x0106be08, 0x00c742ca, 0x552b2ccc, 0x6350e2a0, 0x1e72e0de, 0xccf12234, 0x46edb8c7, 0xfa015f85, 0x197cf634, 0x13763bf3,
            0x944f1592, 0xe557b28b, 0x2bd8a4d0, 0x4fc7a7bd, 0x38404f22, 0x56bf37b9, 0xa8749e66, 0xf5a83610, 0x337711eb, 0xfbd3bb90, 0x1118d4eb, 0xcba6bb34,
            0x953b7f02, 0x5d4dcffb, 0x32d433a8, 0xda2d5607, 0x2672a1d7, 0xb7a79cb4, 0x927a0a04, 0x71ffae2c, 0xf4e317a4, 0x0efa491b, 0xe2e81826, 0x8bf855bd,
            0x2a17119a, 0x918849ea, 0xce17459f, 0x6d182a89, 0x0ed72f0b, 0x0423a22d, 0xae67fff8, 0xe417d50a, 0x584fe123, 0xe1409d23, 0xf62a9a3d, 0x3b513e79,
            0x700275e4, 0x334b8dcc, 0xbf375938, 0xebae6330, 0x630978f3, 0x8b2c5afd, 0x6b7cd616, 0x7c851bca, 0x680e054a, 0xaaa7cc2a, 0xa3f643e6, 0x178e1ef7,
            0x7bee0a2b, 0x26eec7b2, 0x93e372da, 0xcd2c6d94, 0x167fd433, 0x48502291, 0x050c401a, 0x0771e1de, 0x6a99a07a, 0x672d53cb, 0xef27069c, 0x9649ec49,
            0x92f60932, 0x3be76104, 0x79fc314d, 0x685982bf, 0x6c7a238b, 0xc3fd4f96, 0x557aa87b, 0xb10e59c6, 0x426e3a5e, 0x3685a6b5, 0x8e6d4e6f, 0xc9b6fdae,
            0xa8b965e5, 0xac76e013, 0xf723ee16, 0xf8855bdc, 0xc1c98b05, 0x69c46d8c, 0xcbe0c5a5, 0x47dfdbe7, 0x63a83df5, 0x4f4ac4d1, 0x5412a01b, 0xfc50561d,
            0x45a3ed0a, 0x08581ca3, 0x2365c9f4, 0x30c313ab, 0xcad6eab5, 0xea7b93b3, 0xdfebce5b, 0xb4bf41d1, 0x202cd026, 0x2193eced, 0xb3a21ca3, 0xc05f34f2,
            0xcf24efff, 0x3b86a707, 0x62ea6a77, 0xa18f46c4, 0x8e5b2515, 0x65a3f59b, 0xc15f0031, 0xa8bd57f6, 0xd87310d7, 0x9831299d, 0x0c1d48e2, 0x6bfe798a,
            0x1c53eb23, 0x1ba93edc, 0xd9d74f44, 0x14617366, 0x491ae775, 0x8033fa89, 0x3e2f9af1, 0xdc5be5ed, 0x94f3ec66, 0x2a391b85, 0x80f53d84, 0x7e205c01,
            0xfa90058e, 0x12c0d70d, 0xe25b0269, 0xe1e4d95a, 0x9990a02d, 0xebe3f30e, 0x5fe3302e, 0x2a122364, 0xf015dae4, 0x41cd06e9, 0x22261561, 0xabceeae5,
            0x225145f1, 0xf1bd434e, 0xd21b1b47, 0xb14bde3d, 0x5fca1353, 0xecd8f3fc, 0x94399e34, 0xadb1fa0f, 0x5084b522, 0xa7d61409, 0x73bdd931, 0x91080d99,
            0xbf4f17aa, 0x21ab11fe, 0x7188d118, 0xdc7e710f, 0xb93d46c7, 0xfe03a4a6, 0x61d197d1, 0x9787f369, 0xe93b37d5, 0x920b57e3, 0xb8d15d55, 0x3a4512c6,
            0xb0096a1c, 0x19f1a899, 0x72a1ac90, 0xf51a0698, 0xaa7ee4ed, 0x90b0fa19, 0x63bd09cb, 0x63eb3798, 0x329a3400, 0xe294724c, 0xfaca43a7, 0x4a7360ad,
            0x00ef18c1, 0x447cab7a, 0xad9f70a0, 0x2fe7dec3, 0xe9fd44b8, 0x2f91b255, 0x1d2c61d0, 0xa898c50c, 0x9835a476, 0x1bae6ff2, 0xfd38362c, 0xd9b8be6b,
            0x0319a19c, 0x8b4b5961, 0x8f47084c, 0xdb7e3832, 0xb389e8c5, 0x151ecebc, 0xa3e426d4, 0x0ab1b7d4, 0x4596d18e, 0x190295fe, 0x52a2c81d, 0x077750ff,
            0xe2bdc586, 0x48b32a08, 0xe930e45f, 0xe77913e9, 0x121f06cd, 0xfea27632, 0xde393095, 0x3712e83b, 0x4b8a0bb6, 0x47bf93d4, 0x8eb569f5, 0xd9cdf11a,
            0x2ed1de4f, 0x5ec9c2f7, 0x054d6ce2, 0x86e27bd8, 0xb54db9d2, 0x7928644c, 0xf94d11f8, 0x0dddfe83, 0x9bbd508c, 0x4f2f9bac, 0x344e251e, 0x2c3fa1ba,
            0x005509fb, 0xa419d79e, 0xa11234de, 0x148d185a, 0x3a0c9880, 0x483377a3, 0xa9fc678d, 0xc4d937a2, 0x17867e82, 0x085202fe, 0x9f980f42, 0xb4399e81,
            0x479d4373, 0x3b609787, 0x246a5442, 0x1ab2cdaf, 0xb213149c, 0x6aaabeba, 0x1858cd25, 0xc7032ea3, 0x90671ecc, 0x63e56920, 0xead74d34, 0x270586a7,
            0x877950de, 0x95b03d78, 0x55e9ab59, 0x329be279, 0x55d201b7, 0x72ea31fe, 0x0a02eb39, 0xd3c9741c, 0x41821cbd, 0xcb576512, 0x02568dfb, 0x00dc58ef,
            0x5c3ff209, 0x60c8c3ad, 0x1c2bea8c, 0xdc19b0c0, 0xbf4b1ba0, 0x9a323136, 0xb79a6c94, 0x99b7c0d6, 0xdeceff27, 0xf5a7a14b, 0x90d0da96, 0xe704280d,
            0x136c6279, 0x75e856a4, 0xa5362bf7, 0x4ab2ea91, 0x61adbc44, 0xd557752d, 0xbfdc9e04, 0xb8f01e63, 0xef8c1cf7, 0x0fbc3aa6, 0x756958f9, 0xcbcedd64,
            0x364e0cbf, 0xe57eee25, 0x7793d5d2, 0xd0593a5c, 0xad481ff2, 0x9054e233, 0x0d2dfdab, 0x6bd83c41, 0xac2bb83d, 0x448a5cea, 0x291589b0, 0xf73b1621,
            0x03d8addb, 0x2263f726, 0x4efa07c7, 0x00f5b351, 0x35cffa08, 0xad85bc14, 0x046ac82d, 0x4eb59050, 0x99ce7305, 0x72cd4ff1, 0x24458e75, 0x213563ff,
            0xa0ce3c6f, 0xb8b448ec, 0x128e92a1, 0xa893cb67, 0x62e6122a, 0x68c2020e, 0x7c307d92, 0xede4730c, 0x4819fb0e, 0x2d52a9ad, 0x03f39dd0, 0x359825e9,
            0x90687e13, 0xbd2ff4ac, 0xbb46427f, 0xb99c70fe, 0x7ae727c0, 0xd4f141ea, 0x5c1e3eb0, 0xce31914f, 0xc1aa238c, 0x5cbd81a9, 0x04d2abf5, 0x779792b5,
            0x3202252e, 0x175f2230, 0x87bb67c8, 0x166cd3ce, 0xcb06bd11, 0xb671ea1e, 0xbfa71779, 0xd2a667d0, 0x754345b7, 0xb61c5e03, 0x223a8ff9, 0x17933f1b,
            0x23786221, 0x27989233, 0x5ed5cb59, 0xd541e34a, 0x0a5b4dda, 0xcd55f4bc, 0x3afe0095, 0xd028823a, 0x2645c8bb, 0x9458c091, 0xe1b976ef, 0x4f4e67ef,
            0x143bc6ff, 0xf4bc3e76, 0xde691b4d, 0xf3d265d3, 0x1dc1de07, 0x9cf4e57a, 0x3c073629, 0xa74266aa, 0x3765989e, 0xa62c5939, 0x4db48309, 0x480db331,
            0x98f0b07d, 0xfa830367, 0x41fe1b93, 0x6e49e7e9, 0xe080c023, 0x95beb3c5, 0xbef5c5c6, 0x8b970a6c, 0xbb88f170, 0xba02e647, 0xb8c51992, 0x90c01f05,
            0x4f28cc37, 0x928bfcc8, 0x48090ccd, 0xedc8f6cf, 0xbfac00c6, 0xa40be2cc, 0x62f96fcc, 0x746cbdd4, 0xb0137c06, 0xd8b8318f, 0x9ae7e8aa, 0x8188b60d,
            0x0b5639cd, 0xbb96197c, 0xd017abc9, 0xf5f9bdd7, 0x4623c0ba, 0x30556937, 0x1aad014c, 0xc3248118, 0x0a51385b, 0x8a7f27e6, 0x65140e4e, 0x029fe631,
            0x80d3107f, 0xc251b5d9, 0x78233ef6, 0x04a284b5, 0x1d2dafae, 0x03fd2757, 0x143324ce, 0x8e0ad256, 0x63d60b8c, 0x32a7bbbc, 0x803fc92f, 0x2dc527ac,
            0xe2af9355, 0x713336fa, 0x7604ccdd, 0x944c0659, 0x07d8ec6c, 0xe55a1f3c, 0x76c99ddf, 0x53249e56, 0x4b77b243, 0xccb3fbac, 0x9268fccd, 0x9a0f0a46,
            0xa858efa3, 0x416ef978, 0x02aa527f, 0xff19c55d, 0x362693da, 0xb665c6f5, 0x3b13bf14, 0xba84339b, 0x9e15a573, 0x1dc0cb25, 0x00000000, 0x00000000
        };

        private byte[]? extraBuffer;

        public override bool CanRead => sourceStream.CanRead;

        public override bool CanSeek => sourceStream.CanSeek;

        public override bool CanWrite => sourceStream.CanWrite;

        public override long Length => sourceStream.Length;

        public override long Position
        {
            get { lock (sourceStream) { return sourceStream.Position; } }
            set { lock (sourceStream) { sourceStream.Position = value; } }
        }

        public override void Flush()
        {
            sourceStream.Flush();
        }

        public override int Read(byte[] buffer, int offset, int count)
        {
            // Reading must occur on 8-byte boundaries for the decryption to work properly
            // and we must abstract this from the base stream reading us

            int positionAlign = (int)Position % 8; // To subtract from Position
            int countPadding = (8 - (count + positionAlign) % 8) % 8; // New 8-byte-aligned padding for count

            int read;
            if (positionAlign <= 0)
            {
                // Straightforward branch for 8-byte-aligned positions

                lock (sourceStream)
                {
                    // Read the 8-byte-aligned count
                    read = sourceStream.Read(buffer, offset, count + countPadding);

                    // Base stream expects us to be at count - countPadding
                    Position -= countPadding;
                }

                // Decrypt the buffer
                Decrypt(buffer, offset, read);

                // Pretend we didn't do any of the stuff above
                read -= countPadding;
            }
            else
            {
                // Extra buffer to store aligned data for decryption
                int neededBytes = positionAlign + count + countPadding;
                extraBuffer = EnsureBuffer(extraBuffer, neededBytes);

                lock (sourceStream)
                {
                    // Align position before reading
                    sourceStream.Position -= positionAlign;

                    // Read for the entire extra buffer
                    read = sourceStream.Read(extraBuffer, offset, neededBytes);

                    // Base stream expects us to be at count - countPadding
                    //
                    // The reasoning between only needing to subtract countPadding here is that
                    // the data needed falls between positionAlign and positionAlign + count,
                    // and countPadding is the extra bytes
                    sourceStream.Position -= countPadding;
                }

                // Decrypt the data
                Decrypt(extraBuffer, offset, extraBuffer.Length);

                // Transfer only the expected required data to the main buffer
                for (int i = 0; i < count; i++)
                {
                    buffer[i] = extraBuffer[i + positionAlign];
                }

                // Pretend we didn't do any of the stuff above
                read -= positionAlign + countPadding;
            }

            // Yeah, we read it alright
            return read;
        }

        public override long Seek(long offset, SeekOrigin origin)
        {
            lock (sourceStream)
            {
                return sourceStream.Seek(offset, origin);
            }
        }

        public override void SetLength(long value)
        {
            lock (sourceStream)
            {
                sourceStream.SetLength(value);
            }
        }

        public override void Write(byte[] buffer, int offset, int count)
        {
            throw new NotImplementedException();
        }

        private byte[] EnsureBuffer(byte[]? buffer, int length)
         {
            if (buffer?.Length < length || buffer is null)
            {
                buffer = new byte[length];
            }

            return buffer;
        }

        private int Decrypt(byte[] buffer, int offset, int length)
        {
            if (length <= 0) return 0;

            int remaining = length >> 3;
            int current = offset;
            do
            {
                Decrypt8Bytes(buffer, current);
                remaining--;
                current += 8;
            }
            while (remaining != 0);

            return length >> 3 << 3;
        }

        private void Decrypt8Bytes(byte[] buffer, int offset)
        {
            uint a = (uint)(
                buffer[offset + 0] << 0x18 |
                buffer[offset + 1] << 0x10 |
                buffer[offset + 2] << 0x08 |
                buffer[offset + 3] << 0x00);
            uint b = (uint)(
                buffer[offset + 4] << 0x18 |
                buffer[offset + 5] << 0x10 |
                buffer[offset + 6] << 0x08 |
                buffer[offset + 7] << 0x00);

            a ^= keyTable[0x11];
            for (int i = 0x10; i > 0x0; i--)
            {
                uint target = i % 2 == 0 ? a : b;
                uint value = (
                    keyTable[(target >> 0x18 & 0xFF) + 0x012] +
                    keyTable[(target >> 0x10 & 0xFF) + 0x112] ^
                    keyTable[(target >> 0x08 & 0xFF) + 0x212]) +
                    keyTable[(target >> 0x00 & 0xFF) + 0x312] ^
                    keyTable[i];

                if (i % 2 == 0)
                    b ^= value;
                else
                    a ^= value;
            }
            b ^= keyTable[0x00];

            buffer[offset + 0] = (byte)(b >> 0x18);
            buffer[offset + 1] = (byte)(b >> 0x10);
            buffer[offset + 2] = (byte)(b >> 0x08);
            buffer[offset + 3] = (byte)(b >> 0x00);
            buffer[offset + 4] = (byte)(a >> 0x18);
            buffer[offset + 5] = (byte)(a >> 0x10);
            buffer[offset + 6] = (byte)(a >> 0x08);
            buffer[offset + 7] = (byte)(a >> 0x00);
        }
    }
}
